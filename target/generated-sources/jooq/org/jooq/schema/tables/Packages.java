/*
 * This file is generated by jOOQ.
 */
package org.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.schema.Keys;
import org.jooq.schema.Public;
import org.jooq.schema.tables.records.PackagesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Packages extends TableImpl<PackagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.packages</code>
     */
    public static final Packages PACKAGES = new Packages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PackagesRecord> getRecordType() {
        return PackagesRecord.class;
    }

    /**
     * The column <code>public.packages.package_id</code>.
     */
    public final TableField<PackagesRecord, String> PACKAGE_ID = createField(DSL.name("package_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.packages.x_pos</code>.
     */
    public final TableField<PackagesRecord, Integer> X_POS = createField(DSL.name("x_pos"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.packages.y_pos</code>.
     */
    public final TableField<PackagesRecord, Integer> Y_POS = createField(DSL.name("y_pos"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.packages.x_dist</code>.
     */
    public final TableField<PackagesRecord, Integer> X_DIST = createField(DSL.name("x_dist"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.packages.y_dist</code>.
     */
    public final TableField<PackagesRecord, Integer> Y_DIST = createField(DSL.name("y_dist"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.packages.project_id</code>.
     */
    public final TableField<PackagesRecord, String> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.packages.content_name</code>.
     */
    public final TableField<PackagesRecord, String> CONTENT_NAME = createField(DSL.name("content_name"), SQLDataType.CLOB.nullable(false), this, "");

    private Packages(Name alias, Table<PackagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Packages(Name alias, Table<PackagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.packages</code> table reference
     */
    public Packages(String alias) {
        this(DSL.name(alias), PACKAGES);
    }

    /**
     * Create an aliased <code>public.packages</code> table reference
     */
    public Packages(Name alias) {
        this(alias, PACKAGES);
    }

    /**
     * Create a <code>public.packages</code> table reference
     */
    public Packages() {
        this(DSL.name("packages"), null);
    }

    public <O extends Record> Packages(Table<O> child, ForeignKey<O, PackagesRecord> key) {
        super(child, key, PACKAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PackagesRecord> getPrimaryKey() {
        return Keys.PACKAGES_PKEY;
    }

    @Override
    public List<UniqueKey<PackagesRecord>> getKeys() {
        return Arrays.<UniqueKey<PackagesRecord>>asList(Keys.PACKAGES_PKEY);
    }

    @Override
    public Packages as(String alias) {
        return new Packages(DSL.name(alias), this);
    }

    @Override
    public Packages as(Name alias) {
        return new Packages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Packages rename(String name) {
        return new Packages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Packages rename(Name name) {
        return new Packages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
