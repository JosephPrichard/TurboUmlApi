/*
 * This file is generated by jOOQ.
 */
package org.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.schema.Indexes;
import org.jooq.schema.Keys;
import org.jooq.schema.Public;
import org.jooq.schema.tables.records.RelationshipsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Relationships extends TableImpl<RelationshipsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.relationships</code>
     */
    public static final Relationships RELATIONSHIPS = new Relationships();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelationshipsRecord> getRecordType() {
        return RelationshipsRecord.class;
    }

    /**
     * The column <code>public.relationships.relationship_id</code>.
     */
    public final TableField<RelationshipsRecord, String> RELATIONSHIP_ID = createField(DSL.name("relationship_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.relationships.class_id_from</code>.
     */
    public final TableField<RelationshipsRecord, String> CLASS_ID_FROM = createField(DSL.name("class_id_from"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.relationships.class_id_to</code>.
     */
    public final TableField<RelationshipsRecord, String> CLASS_ID_TO = createField(DSL.name("class_id_to"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.relationships.type</code>.
     */
    public final TableField<RelationshipsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.relationships.project_id</code>.
     */
    public final TableField<RelationshipsRecord, String> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.relationships.label</code>.
     */
    public final TableField<RelationshipsRecord, String> LABEL = createField(DSL.name("label"), SQLDataType.CLOB, this, "");

    private Relationships(Name alias, Table<RelationshipsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Relationships(Name alias, Table<RelationshipsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.relationships</code> table reference
     */
    public Relationships(String alias) {
        this(DSL.name(alias), RELATIONSHIPS);
    }

    /**
     * Create an aliased <code>public.relationships</code> table reference
     */
    public Relationships(Name alias) {
        this(alias, RELATIONSHIPS);
    }

    /**
     * Create a <code>public.relationships</code> table reference
     */
    public Relationships() {
        this(DSL.name("relationships"), null);
    }

    public <O extends Record> Relationships(Table<O> child, ForeignKey<O, RelationshipsRecord> key) {
        super(child, key, RELATIONSHIPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKI_RELATIONSHIPS_CLASS_ID_FROM_FKEY, Indexes.FKI_RELATIONSHIPS_CLASS_ID_TO_FKEY, Indexes.FKI_RELATIONSHIPS_PROJECT_ID_FKEY);
    }

    @Override
    public UniqueKey<RelationshipsRecord> getPrimaryKey() {
        return Keys.RELATIONSHIPS_PKEY;
    }

    @Override
    public List<UniqueKey<RelationshipsRecord>> getKeys() {
        return Arrays.<UniqueKey<RelationshipsRecord>>asList(Keys.RELATIONSHIPS_PKEY);
    }

    @Override
    public List<ForeignKey<RelationshipsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RelationshipsRecord, ?>>asList(Keys.RELATIONSHIPS__RELATIONSHIPS_CLASS_ID_FROM_FKEY, Keys.RELATIONSHIPS__RELATIONSHIPS_CLASS_ID_TO_FKEY, Keys.RELATIONSHIPS__RELATIONSHIPS_PROJECT_ID_FKEY);
    }

    private transient Classes _relationshipsClassIdFromFkey;
    private transient Classes _relationshipsClassIdToFkey;
    private transient Projects _projects;

    public Classes relationshipsClassIdFromFkey() {
        if (_relationshipsClassIdFromFkey == null)
            _relationshipsClassIdFromFkey = new Classes(this, Keys.RELATIONSHIPS__RELATIONSHIPS_CLASS_ID_FROM_FKEY);

        return _relationshipsClassIdFromFkey;
    }

    public Classes relationshipsClassIdToFkey() {
        if (_relationshipsClassIdToFkey == null)
            _relationshipsClassIdToFkey = new Classes(this, Keys.RELATIONSHIPS__RELATIONSHIPS_CLASS_ID_TO_FKEY);

        return _relationshipsClassIdToFkey;
    }

    public Projects projects() {
        if (_projects == null)
            _projects = new Projects(this, Keys.RELATIONSHIPS__RELATIONSHIPS_PROJECT_ID_FKEY);

        return _projects;
    }

    @Override
    public Relationships as(String alias) {
        return new Relationships(DSL.name(alias), this);
    }

    @Override
    public Relationships as(Name alias) {
        return new Relationships(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Relationships rename(String name) {
        return new Relationships(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Relationships rename(Name name) {
        return new Relationships(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
